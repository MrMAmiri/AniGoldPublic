// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using AniGoldShop.Domain.Entities;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore;
using System;
using AniGoldShop.Inferastructure.Data.Common.Configuration;

namespace AniGoldShop.Domain.Entities.Configurations
{
    public  class FactorsConfiguration  : BaseEntityConfiguration<Factors>
    {
        public override void Configure(EntityTypeBuilder<Factors> entity)
        {
            entity.HasKey(e => e.FactorId);

            //entity.Property(e => e.FactorId).HasDefaultValueSql("(newid())");

            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

            entity.Property(e => e.FactorAddress).HasMaxLength(1000);

            entity.Property(e => e.FactorCellPhone).HasMaxLength(50);

            entity.Property(e => e.Lang)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength(true);

            entity.HasOne(d => d.Agent)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_Factors_Agents");

            entity.HasOne(d => d.FactorIsPa)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.FactorIsPaid)
                .HasConstraintName("FK_Factors_PaidInfos");

            entity.HasOne(d => d.FactorIsSentNavigation)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.FactorIsSent)
                .HasConstraintName("FK_Factors_SendInfos");

            entity.HasOne(d => d.PayType)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.PayTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Factors_PayTypes");

            entity.HasOne(d => d.SendType)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.SendTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Factors_SendTypes");

            entity.HasOne(d => d.Province)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.ProvinceId)
                .HasConstraintName("FK_Factors_Provinces");

            entity.HasOne(d => d.City)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.CityId)
                .HasConstraintName("FK_Factors_Cities");

            entity.HasOne(d => d.User)
                .WithMany(p => p.Factors)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Factors_Users");

      
        }

      
    }
}
